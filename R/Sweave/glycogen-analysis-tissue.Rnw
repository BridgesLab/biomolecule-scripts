\documentclass{article}

\usepackage{fullpage}
\usepackage[colorlinks=true]{hyperref}
\usepackage[tableposition=top]{caption}
\usepackage[utf8]{inputenc}

\begin{document}

\title{Sample Analysis of Glycogen Determination from Tissues}
\author{The Author}
\date{The Date}
\maketitle

<<data-input, echo=FALSE>>=
working_directory <- 'some location'
setwd(working_directory)
data_file <- "raw_glycogen_data.csv" #columns include Mouse, Volume, Weight, A505
data <- read.csv(data_file)
#std_curve_file <- "std_curve.csv" #columns Glucose, A505
#std_curve <- read.csv(std_curve_file)
mapping_file <- "../../mapping.csv" #columns Mouse and Treatment/Genotype/Manipulation
mapping <- read.csv(mapping_file)
merged_data <- (data, mapping, by="Mouse")
@

The data is saved in \verb+\Sexpr{getwd()}+.  The data files used are \verb+\Sexpr{std_curve_file}+ for the standard curve, \verb+\Sexpr{raw_data_file}+ for the raw data and \verb+\Sexpr{mapping_file}+ for the mouse-treatment mapping.


<<std-curve-analysis, echo=TRUE>>=
glucose.mwt <- 180.15588 #g/mol not used unless wanting to convert to molar
std_fit <- lm(Glucose~A505 -1, data=std_curve) #force through intercept
@

The slope of the curve was \Sexpr{round(coef(std_fit),4)}ug/mAU (95\% CI of \Sexpr{round(confint(std_fit)[1],3)}-\Sexpr{round(confint(std_fit)[2],3)}) with a R\textsuperscript{2} of \Sexpr{round(summary(std_fit)$r.squared,3)}.  See Figure \ref{fig:std_curve} for the standard curve.

\begin{figure}
\begin{center}
<<label=std-curve,fig=TRUE,echo=FALSE>>=
plot(Glucose~A505, data=std_curve,
     ylab="Glucose (ug)",
     ylim=c(0,max(std_curve$Glucose)),
     xlim=c(0,max(std_curve$A505)))     )
abline(std_fit)
@
\end{center}
\caption{Standard Curve for Glucose Assay.}
\label{fig:std_curve}
\end{figure}


<<data-analysis, echo=TRUE>>=
merged_data$Glycogen <- merged_data$A505*coefficients(std_fit) #in ug/assay
assay.volume <- 100 #uL
merged_data$total.glycogen <- merged_data$Glycogen*200/assay.volume #in ug
merged_data$normalized.glycogen <- merged_data$total.glycogen/merged_data$Weight*1000 # in ug/g
calculated.data <- data.frame(Mouse = merged_data$Mouse, 
                              Treatment = merged_data$Treatment,
                              Glycogen = merged_data$normalized.glycogen,
                              check.rows=F)
result.t.test <- t.test(Glycogen~Treatment, data=calculated.data) #for single comparason
#result.t.test <- with(calculated.data, pairwise.t.test(Glycogen,Treatment)) for multiple comparasons
print(result.t.test) 
@

<<label=data-tables,echo=FALSE,results=tex>>=
require(xtable)
print(xtable(calculated.data[order(calculated.data$Treatment),], caption = "Calculated Data", label = "tab:one"), include.rownames=F)
@

<<data-summary, echo=FALSE>>=
require(reshape)
summary <- as.matrix(cast(calculated.data, ~Treatment, value="Glycogen", fun.aggregate=mean))
se <- function(x) sd(x, na.rm=T)/sqrt(length(x))
error.se <- as.matrix(cast(calculated.data, ~Treatment, value="Glycogen", fun.aggregate=se))
summary.table <- rbind(Mean=summary, SE=error.se)
rownames(summary.table) <- c("Mean", "Standard Error")
@

<<label=summary-tables,echo=FALSE,results=tex>>=
print(xtable(summary.table, caption = "Summarized Data", label = "tab:summary"))
@

<<label=barplot, include=FALSE, echo=FALSE>>=
ymax <- max(summary)+max(error.se)
plot <- barplot(summary,
        ylab="Glycogen Levels (ug/g)",
        ylim = c(0,ymax))
superpose.eb <- function (x, y, ebl, ebu = ebl, length = 0.08, ...)
  arrows(x, y + ebu, x, y - ebl, angle = 90, code = 3,
  length = length, ...)
superpose.eb(plot, summary, error.se)
@

<<label=boxplot, include=FALSE, echo=FALSE>>=
plot <- boxplot(calculated.data$Glycogen~calculated.data$Treatment,
        ylab="Glycogen Levels (ug/g)",
        ylim = c(0,max(calculated.data$Glycogen)))
@

<<label=dotplot, include=FALSE, echo=FALSE>>=
plot(jitter(as.numeric(calculated.data$Treatment)), calculated.data$Glycogen, 
     pch=19, xaxt="n",
     ylab="Glycogen Levels (ug/g)",
     xlab="",
     ylim=c(0,max(calculated.data$Glycogen)))
axis(side=1, at=1:length(levels(calculated.data$Treatment)), labels=levels(calculated.data$Treatment))

#calculate means
means <- tapply(calculated.data$Glycogen,calculated.data$Treatment, mean)
#add axis means
scaling = length(levels(calculated.data$Treatment))
scaling.values <- seq(1, scaling, by=1)
scaling.values.upper <- scaling.values+1/scaling
scaling.values.lower <- scaling.values-1/scaling
for (i in scaling.values) segments(scaling.values.lower[i], means[i], scaling.values.upper[i], means[i])
@

\begin{figure}
\begin{center}
<<label=barplot,fig=TRUE,echo=FALSE>>=
<<barplot>>
@
\end{center}
\caption{Summary of Glycogen Levels.}
\label{fig:barplot}
\end{figure}

\begin{figure}
\begin{center}
<<label=boxplot,fig=TRUE,echo=FALSE>>=
<<boxplot>>
@
\end{center}
\caption{Summary of Glycogen Levels.}
\label{fig:boxplot}
\end{figure}

\begin{figure}
\begin{center}
<<label=dotplot,fig=TRUE,echo=FALSE>>=
<<dotplot>>
@
\end{center}
\caption{Summary of Glycogen Levels.}
\label{fig:dotplot}
\end{figure}

\section*{Session Information}
<<sessionInfo, results=tex, echo=F>>=
toLatex(sessionInfo())
@


\end{document}
